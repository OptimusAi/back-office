trigger:
  branches:
    include:
      - main
      - develop
  paths:
    exclude:
      - apps/cpa

variables:
  npm_config_cache: $(Pipeline.Workspace)/.npm
  vmImageName: 'ubuntu-latest'

parameters:
- name: namespace
  displayName: 'Kubernetes namespace'
  type: string
  default: 'parkplus-dev'
  values:
  - parkplus-qa
  - parkplus-dev

stages:

- stage: Build
  displayName: 'Build source, docker image and publish docker image'
  jobs:
  - job: BuildAndDeploy
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: NodeTool@0
      inputs:
        versionSource: spec
        versionSpec: 16.13.1
    - task: Cache@2
      displayName: 'Cache NPM'
      inputs:
        key: 'npm | "$(Agent.OS)" | package-lock.json'
        path: $(npm_config_cache)
        restoreKeys: |
           npm | "$(Agent.OS)"

    - script: npm ci --no-optional
      displayName: 'Install Packages'

    - script: npm run affected:test -- --base=origin/main~1 --codeCoverage --updateSnapshot --coverageReporters=cobertura --reporters=jest-junit
      displayName: 'Test'

    - script: npm run affected:lint -- --base=origin/main~1
      displayName: 'Lint'

    - script: npm run nx -- run client-shell:build
      displayName: 'Build JS code for client app'

    - task: Docker@2
      displayName: 'Build docker Image and Publish to Docker repo'
      inputs:
        containerRegistry: 'PP-II-Dev-ACR-Svc-Conn-1'
        repository: 'back-offices'
        command: 'buildAndPush'
        buildContext: $(Build.Repository.LocalPath)
        Dockerfile: '**/Dockerfile'
        tags: |
          $(Build.BuildId)
          latest

- stage: DeployHelmChartArtifact
  displayName: 'Deploy helm chart artifacts'
  condition: succeeded()
  jobs:
  - job: DeployArtifact
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: CopyFiles@2
      displayName: 'Prepare artifacts for uploading'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/chart/back-office'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/'

    - task: PublishBuildArtifacts@1
      displayName: 'Upload artifacts'
      inputs:
        artifactName: 'back-office-helm-chart'

- stage: KubDeploy
  displayName: 'Deploy to Kubernetes'
  condition: succeeded()
  jobs:
    - deployment: Deploy
      environment: ${{ parameters.namespace }}
      pool:
        vmImage: $(vmImageName)
      strategy:
        runOnce:
          deploy:
            steps:
            - task: HelmInstaller@0
              inputs:
                helmVersion: '3.4.1'
                installKubectl: true
            - task: HelmDeploy@0
              displayName: 'Deploying to namespace ${{ parameters.namespace }}'
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceConnection: 'PP-II-Dev-AKS-Cluster-parkplus-dev-Svc-Conn'
                namespace: ${{ parameters.namespace }}
                releaseName: 'back-offices'
                command: 'upgrade'
                chartType: 'FilePath'
                chartPath: '$(Pipeline.Workspace)/back-office-helm-chart'
                valueFile: '$(Pipeline.Workspace)/back-office-helm-chart/${{ parameters.namespace }}.values.yaml'
                arguments: '--set image.tag=$(Build.BuildId)'
